/**
* DevExtreme (ui/toolbar.d.ts)
* Version: 21.1.3
* Build date: Tue May 18 2021
*
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
*/
import {
    UserDefinedElement,
    DxElement
} from '../core/element';

import {
    template
} from '../core/templates/template';

import DataSource, {
    DataSourceOptions
} from '../data/data_source';

import {
    EventInfo,
    NativeEventInfo,
    InitializedEventInfo,
    ChangedOptionInfo,
    ItemInfo
} from '../events/index';

import CollectionWidget, {
    CollectionWidgetItem,
    CollectionWidgetOptions
} from './collection/ui.collection_widget.base';

export type ContentReadyEvent = EventInfo<dxToolbar>;

export type DisposingEvent = EventInfo<dxToolbar>;

export type InitializedEvent = InitializedEventInfo<dxToolbar>;

export type ItemClickEvent = NativeEventInfo<dxToolbar> & ItemInfo;

export type ItemContextMenuEvent = NativeEventInfo<dxToolbar> & ItemInfo;

export type ItemHoldEvent = NativeEventInfo<dxToolbar> & ItemInfo;

export type ItemRenderedEvent = NativeEventInfo<dxToolbar> & ItemInfo;

export type OptionChangedEvent = EventInfo<dxToolbar> & ChangedOptionInfo;

/**
 * @deprecated
 * @deprecated Warning! This type is used for internal purposes. Do not import it directly.
 */
export interface dxToolbarOptions extends CollectionWidgetOptions<dxToolbar> {
    /**
     * 
     */
    dataSource?: string | Array<string | dxToolbarItem | any> | DataSource | DataSourceOptions;
    /**
     * 
     */
    items?: Array<string | dxToolbarItem | any>;
    /**
     * Specifies a custom template for menu items.
     */
    menuItemTemplate?: template | ((itemData: any, itemIndex: number, itemElement: DxElement) => string | UserDefinedElement);
    /**
     * Specifies the UI component&apos;s height in pixels.
     * @deprecated 
     */
    height?: number | string | (() => number | string);
}
/**
 * The Toolbar is a UI component containing items that usually manage screen content. Those items can be plain text or UI components.
 */
export default class dxToolbar extends CollectionWidget {
    constructor(element: UserDefinedElement, options?: dxToolbarOptions)
}

/**
 * 
 * @deprecated Warning! This type is used for internal purposes. Do not import it directly.
 */
export interface dxToolbarItem extends CollectionWidgetItem {
    /**
     * Specifies a CSS class to be applied to the item.
     */
    cssClass?: string;
    /**
     * Specifies when to display an item in the toolbar&apos;s overflow menu.
     */
    locateInMenu?: 'always' | 'auto' | 'never';
    /**
     * Specifies a location for the item on the toolbar.
     */
    location?: 'after' | 'before' | 'center';
    /**
     * Specifies a template that should be used to render a menu item.
     */
    menuItemTemplate?: template | (() => string | UserDefinedElement);
    /**
     * Configures the DevExtreme UI component used as a toolbar item.
     */
    options?: any;
    /**
     * Specifies when to display the text for the UI component item.
     */
    showText?: 'always' | 'inMenu';
    /**
     * A UI component that presents a toolbar item. To configure it, use the options object.
     */
    widget?: 'dxAutocomplete' | 'dxButton' | 'dxCheckBox' | 'dxDateBox' | 'dxMenu' | 'dxSelectBox' | 'dxTabs' | 'dxTextBox' | 'dxButtonGroup' | 'dxDropDownButton';
}

export type Properties = dxToolbarOptions;

/**
 * @deprecated
 * @deprecated Warning! This type is used for internal purposes. Do not import it directly.
 */
export type Options = dxToolbarOptions;

/**
 * @deprecated
 * @deprecated Warning! This type is used for internal purposes. Do not import it directly.
 */
export type IOptions = dxToolbarOptions;
